// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(nanoid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(nanoid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String             @id @default(nanoid())
    name            String?
    email           String?            @unique
    emailVerified   DateTime?
    image           String?            @db.Text
    accounts        Account[]
    sessions        Session[]
    teamMemberships TeamUser[]
    orgMemberships  OrganizationUser[]
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TeamUserRole {
    ADMIN
    MEMBER
    VIEWER
}

enum OrganizationUserRole {
    ADMIN
    MEMBER
    EXTERNAL
}

model TeamUser {
    userId    String
    teamId    String
    role      TeamUserRole
    user      User         @relation(fields: [userId], references: [id])
    team      Team         @relation(fields: [teamId], references: [id])
    createdAt DateTime     @default(now())
    updatedAt DateTime     @default(now()) @updatedAt

    @@id([userId, teamId])
    @@index([teamId])
    @@index([userId])
}

model OrganizationUser {
    userId         String
    organizationId String
    role           OrganizationUserRole
    user           User                 @relation(fields: [userId], references: [id])
    organization   Organization         @relation(fields: [organizationId], references: [id])
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @default(now()) @updatedAt

    @@id([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

model Team {
    id             String       @id @default(nanoid())
    name           String
    slug           String       @unique
    members        TeamUser[]
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    projects       Project[]
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @default(now()) @updatedAt

    @@index([organizationId])
}

model Organization {
    id                    String               @id @default(nanoid())
    name                  String
    phoneNumber           String?
    slug                  String               @unique
    members               OrganizationUser[]
    teams                 Team[]
    createdAt             DateTime             @default(now())
    updatedAt             DateTime             @default(now()) @updatedAt
    OrganizationInvite    OrganizationInvite[]
    usageSpendingMaxLimit Int?

    promoCode String?
}

enum PIIRedactionLevel {
    STRICT
    ESSENTIAL
}

model Project {
    id                String            @id @default(nanoid())
    name              String
    slug              String            @unique
    apiKey            String            @unique
    teamId            String
    team              Team              @relation(fields: [teamId], references: [id])
    language          String
    framework         String
    firstMessage      Boolean           @default(false)
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @default(now()) @updatedAt
    checks            Check[]
    costs             Cost[]
    topics            Topic[]
    datasets          Dataset[]
    customGraphs      CustomGraph[]
    batchProcessings  BatchProcessing[]
    piiRedactionLevel PIIRedactionLevel @default(ESSENTIAL)

    @@index([teamId])
}

enum INVITE_STATUS {
    PENDING
    ACCEPTED
}

model OrganizationInvite {
    id             String               @id @default(nanoid())
    email          String
    inviteCode     String               @unique
    expiration     DateTime
    status         INVITE_STATUS        @default(PENDING)
    organizationId String
    organization   Organization         @relation(fields: [organizationId], references: [id])
    teamIds        String
    role           OrganizationUserRole
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @default(now()) @updatedAt

    @@index([organizationId])
}

model Check {
    id            String   @id @default(nanoid())
    projectId     String
    project       Project  @relation(fields: [projectId], references: [id])
    checkType     String
    name          String
    slug          String
    isGuardrail   Boolean  @default(false)
    enabled       Boolean  @default(true)
    preconditions Json
    parameters    Json
    sample        Float    @default(1.0)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    @@unique([projectId, slug])
    @@index([projectId])
}

enum CostType {
    TRACE_CHECK
    GUARDRAIL
    CLUSTERING
    BATCH_PROCESSING
}

enum CostReferenceType {
    CHECK
    TRACE
    PROJECT
    BATCH
}

model Cost {
    id            String            @id @default(nanoid())
    projectId     String
    project       Project           @relation(fields: [projectId], references: [id])
    costType      CostType
    costName      String?
    referenceType CostReferenceType
    referenceId   String
    amount        Float
    currency      String
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @default(now()) @updatedAt
    extraInfo     Json?

    @@index([referenceType, referenceId])
    @@index([costType])
    @@index([projectId])
}

model Topic {
    id        String  @id @default(nanoid())
    projectId String
    project   Project @relation(fields: [projectId], references: [id])
    name      String
    parentId  String?
    parent    Topic?  @relation("Subtopics", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    subtopics Topic[] @relation("Subtopics")

    embeddings_model       String
    centroid               Json
    p95Distance            Float
    automaticallyGenerated Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([parentId])
    @@index([projectId])
}

enum DatabaseSchema {
    FULL_TRACE
    LLM_CHAT_CALL
    STRING_I_O
    KEY_VALUE
}

model Dataset {
    id              String            @id @default(nanoid())
    projectId       String
    project         Project           @relation(fields: [projectId], references: [id])
    name            String
    slug            String
    schema          DatabaseSchema
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @default(now()) @updatedAt
    datasetRecords  DatasetRecord[]
    BatchProcessing BatchProcessing[]

    @@unique([projectId, slug])
}

model DatasetRecord {
    id        String   @id @default(nanoid())
    datasetId String
    dataset   Dataset  @relation(fields: [datasetId], references: [id])
    entry     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([datasetId])
}

model CustomGraph {
    id        String   @id @default(nanoid())
    projectId String
    project   Project  @relation(fields: [projectId], references: [id])
    name      String
    graph     Json
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([id])
    @@index([projectId])
}

model BatchProcessing {
    id          String   @id @default(nanoid())
    batchId     String
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id])
    data        Json     @default("{}")
    status      String
    score       Float
    passed      Boolean
    details     String
    cost        Float
    datasetSlug String
    datasetId   String
    dataset     Dataset  @relation(fields: [datasetId], references: [id])
    evaluation  String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    @@unique([id])
    @@index([projectId])
    @@index([datasetId])
}
