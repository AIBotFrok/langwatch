// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(nanoid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(nanoid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(nanoid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String             @id @default(nanoid())
    name            String?
    email           String?            @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    teamMemberships TeamUser[]
    orgMemberships  OrganizationUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    MEMBER
}

model TeamUser {
    userId String
    teamId String
    role   UserRole
    user   User     @relation(fields: [userId], references: [id])
    team   Team     @relation(fields: [teamId], references: [id])

    @@id([userId, teamId])
    @@index([teamId])
    @@index([userId])
}

model OrganizationUser {
    userId         String
    organizationId String
    role           UserRole
    user           User         @relation(fields: [userId], references: [id])
    organization   Organization @relation(fields: [organizationId], references: [id])

    @@id([userId, organizationId])
    @@index([organizationId])
    @@index([userId])
}

model Team {
    id             String       @id @default(nanoid())
    name           String
    slug           String
    members        TeamUser[]
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    projects       Project[]

    @@index([organizationId])
}

model Organization {
    id      String             @id @default(nanoid())
    name    String
    slug    String             @unique
    members OrganizationUser[]
    teams   Team[]
}

model Project {
    id        String @id @default(nanoid())
    name      String
    slug      String
    apiKey    String @unique
    teamId    String
    team      Team   @relation(fields: [teamId], references: [id])
    language  String
    framework String

    @@index([teamId])
}
