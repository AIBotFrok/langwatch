import { Column, Link, Row, Section } from "@react-email/components";
import { Container } from "@react-email/container";
import { Heading } from "@react-email/heading";
import { Html } from "@react-email/html";
import { Img } from "@react-email/img";
import { render } from "@react-email/render";
import sgMail from "@sendgrid/mail";
import { SESClient, SendEmailCommand } from "@aws-sdk/client-ses";

import { env } from "../../env.mjs";
import type { AlertType } from "@prisma/client";

interface TriggerData {
  traceId: string;
}

export const sendTriggerEmail = async ({
  triggerEmails,
  triggerData,
  triggerName,
  projectSlug,
  triggerType,
  triggerMessage,
}: {
  triggerEmails: string[];
  triggerData: TriggerData[];
  triggerName: string;
  projectSlug: string;
  triggerType: AlertType;
  triggerMessage: string;
}) => {
  if (!env.SENDGRID_API_KEY && !(env.USE_AWS_SES && env.AWS_REGION)) {
    console.warn("No email sending method available. Skipping email sending.");
    console.warn(
      "Please set SENDGRID_API_KEY or both USE_AWS_SES and AWS_REGION."
    );
    return;
  }

  const emailHtml = render(
    <Html lang="en" dir="ltr">
      <Container
        style={{
          border: "1px solid #F2F4F8",
          borderRadius: "10px",
          padding: "24px",
          paddingBottom: "12px",
        }}
      >
        <Img
          src="https://app.langwatch.ai/images/logo-icon.png"
          alt="LangWatch Logo"
          width="36"
        />
        <Heading as="h1">
          {triggerType ? `(${triggerType}) ` : ""}LangWatch Trigger
        </Heading>
        <Heading as="h3">{triggerName}</Heading>
        <p>
          This is an automated email generated by your configured triggers.
          Below, you will find the messages that initiated this action.
        </p>
        {triggerMessage && <p>{triggerMessage}</p>}
        <TriggerTable triggerData={triggerData} projectSlug={projectSlug} />

        <p>
          To stop further emails, please de-activate or delete your trigger{" "}
          <Link href={`${env.BASE_HOST}/settings/triggers`}>here</Link>
        </p>
      </Container>
    </Html>
  );

  if (env.USE_AWS_SES && env.AWS_REGION) {
    const sesClient = new SESClient({ region: env.AWS_REGION });

    const params = {
      Destination: {
        ToAddresses: triggerEmails,
      },
      Message: {
        Body: {
          Html: {
            Charset: "UTF-8",
            Data: emailHtml,
          },
        },
        Subject: {
          Charset: "UTF-8",
          Data: `${
            triggerType ? `(${triggerType}) ` : ""
          } Trigger - ${triggerName} }`,
        },
      },
      Source: `${env.ONPREM_EMAIL}`,
    };

    try {
      const command = new SendEmailCommand(params);
      const data = await sesClient.send(command);
      console.log("Email sent successfully:", data);
    } catch (error) {
      console.error("Error sending email:", error);
      throw error;
    }
  } else if (env.SENDGRID_API_KEY) {
    sgMail.setApiKey(env.SENDGRID_API_KEY);
    const msg = {
      to: triggerEmails,
      from: "LangWatch <contact@langwatch.ai>",
      subject: `${
        triggerType ? `(${triggerType}) ` : ""
      }Trigger - ${triggerName} `,
      html: emailHtml,
    };

    await sgMail.send(msg);
  }
};

const TriggerTable = ({
  triggerData,
  projectSlug,
}: {
  triggerData: TriggerData[];
  projectSlug: string;
}) => {
  return (
    <Section>
      {triggerData.slice(0, 10).map((data, index) => (
        <Row key={index}>
          <Column>
            <Link
              href={`${env.BASE_HOST}/${projectSlug}/messages/${data.traceId}`}
            >
              {data.traceId}
            </Link>
          </Column>
        </Row>
      ))}
    </Section>
  );
};
